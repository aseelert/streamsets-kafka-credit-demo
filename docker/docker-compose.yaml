networks:
  streamsets-network:
    driver: bridge

services:
  kafka:
    image: 'bitnami/kafka:latest'
    env_file:
      - .env  # Load environment variables from the .env file
    networks:
      - streamsets-network
    container_name: ibmas-ss-kafka
    environment:
      - KAFKA_CFG_KRAFT=true
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=EXTERNAL://0.0.0.0:9192,INTERNAL://kafka:9194,LOCAL://localhost:9195,CONTROLLER://0.0.0.0:9193
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,LOCAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9193
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - 9192:9192
      - 9193:9193
      - 9194:9194
      - 9195:9195

  kafka-schema:
    image: 'docker.io/bitnami/schema-registry:latest'
    networks:
      - streamsets-network
    container_name: ibmas-ss-kafka-schema
    restart: always
    environment:
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka:9194
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
    volumes:
      - kafka_schema_data:/bitnami
    ports:
      - 8081:8081

  kafbat-ui:
    image: ghcr.io/kafbat/kafka-ui:v1.1.0
    networks:
    - streamsets-network
    container_name: ibmas-ss-kafka_ui
    restart: always
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9194
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://kafka-schema:8081
      - KAFKA_CLUSTERS_0_SERDES=AVRO
    volumes:
      - kafka_ui_data:/config  # Persistent storage for Kafka UI config
    ports:
      - 8195:8080

  postgres:
    image: postgres:latest
    networks:
      - streamsets-network
    container_name: ibmas-ss-postgres
    environment:
      POSTGRES_USER: fraud_user
      POSTGRES_PASSWORD: fraud_pass
      POSTGRES_DB: fraud_detection
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL
    ports:
      - 5542:5432

  postgres-history:
    image: postgres:latest
    networks:
      - streamsets-network
    container_name: ibmas-ss-postgres-history
    environment:
      POSTGRES_USER: fraud_user
      POSTGRES_PASSWORD: fraud_pass
      POSTGRES_DB: fraud_detection
    volumes:
      - ./init-history.sql:/docker-entrypoint-initdb.d/init-history.sql
      - postgres_data_history:/var/lib/postgresql/data  # Persistent storage for PostgreSQL
    ports:
      - 5642:5432

  postgres_ui:
    image: dpage/pgadmin4:latest
    networks:
      - streamsets-network
    container_name: ibmas-ss-postgres_ui
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: ${DEFAULT_PASSWORD}
    volumes:
      - postgres_ui_data:/var/lib/pgadmin  # Persistent storage for pgAdmin4
    ports:
      - 5150:80
    depends_on:
      - postgres
      - postgres-history

  minio:
    image: minio/minio:latest
    networks:
      - streamsets-network
    container_name: ibmas-ss-minio
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=${DEFAULT_PASSWORD}
    command: server /data --console-address ":9101"
    volumes:
      - minio_data:/data  # Persistent storage for MinIO data
    ports:
      - 9100:9000
      - 9101:9101

  streamsets:
    image: streamsets/datacollector:JDK17_5.11.0
    container_name: ibmas-ss-streamsets
    env_file:
      - .env  # Load environment variables from the .env file
    restart: always
    ports:
      - "18630:18630"
    networks:
      - streamsets-network

  streamsets611:
    image: streamsets/datacollector:JDK17_6.1.1
    container_name: ibmas-ss-streamsets-611
    env_file:
      - .env611  # Load environment variables from the .env file
    restart: always
    ports:
      - "18631:18630"
    networks:
      - streamsets-network

  credit_score_api:
    build:
      context: ../credit-endpoint
      dockerfile: Dockerfile
    container_name: ibmas-ss-credit_score_api
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
    restart: always
    networks:
      - streamsets-network

  metabase:
    image: metabase/metabase:latest
    container_name: ibmas-ss-metabase
    hostname: metabase
    environment:
      - MB_DB_FILE=/metabase-data/metabase.db
    volumes:
      - metabase_data:/metabase-data  # Persistent storage for Metabase data
      - /dev/urandom:/dev/random:ro
    ports:
      - 3010:3000
    networks:
      - streamsets-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "-I", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:latest
    container_name: ibmas-ss-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DEFAULT_PASSWORD}
      MYSQL_DATABASE: fraud
      MYSQL_USER: fraud_user
      MYSQL_PASSWORD: fraud_pass

    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql       # Persist data
      - ./mysql-init:/docker-entrypoint-initdb.d/fraud.sql # Run init.sql
    restart: always


# Define persistent volumes
volumes:
  mysql_data:
  postgres_data:
  postgres_data_history:
  metabase_data:
  postgres_ui_data:
  minio_data:
  kafka_data:
  kafka_schema_data:
  kafka_ui_data:
